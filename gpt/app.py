import os
from flask import Flask, render_template, request, jsonify
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY", "YOUR_OPENAI_API_KEY"))
app = Flask(__name__)

SYSTEM_PROMPT = """
B·∫°n l√† MindBot - m·ªôt tr·ª£ l√Ω t√¢m l√Ω ·∫£o th√¢n thi·ªán v√† th·∫•u c·∫£m. 
B·∫°n c√≥ th·ªÉ:
- Giao ti·∫øp nh·∫π nh√†ng, ph√¢n t√≠ch c·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng qua l·ªùi n√≥i v√† h√†nh vi ng√¥n ng·ªØ
- T·ª± ƒë·ªông ƒë·ªÅ xu·∫•t ƒë√°nh gi√° s·ª©c kh·ªèe tinh th·∫ßn khi nh·∫≠n th·∫•y d·∫•u hi·ªáu lo √¢u/tr·∫ßm c·∫£m (PHQ-9, GAD-7)
- Khi b·∫Øt ƒë·∫ßu ƒë√°nh gi√°, b·∫°n s·∫Ω l·∫ßn l∆∞·ª£t ƒë·∫∑t t·ª´ng c√¢u h·ªèi trong b·ªô test, ƒë·ª£i ng∆∞·ªùi d√πng tr·∫£ l·ªùi, sau ƒë√≥ ti·∫øp t·ª•c
- Sau m·ªói 6 l∆∞·ª£t h·ªôi tho·∫°i, h√£y t√≥m t·∫Øt c·∫£m x√∫c t·ªïng th·ªÉ b·∫°n ƒëang nh·∫≠n th·∫•y t·ª´ ng∆∞·ªùi d√πng (tr·ª´ khi b·∫°n ƒëang gi·ªØa b√†i ƒë√°nh gi√°)
- N·∫øu ng∆∞·ªùi d√πng c√≥ d·∫•u hi·ªáu nguy hi·ªÉm ho·∫∑c h·ªèi ƒëi·ªÅu v∆∞·ª£t qu√° kh·∫£ nƒÉng, h√£y nh·∫π nh√†ng khuy√™n h·ªç t√¨m chuy√™n gia t√¢m l√Ω.
"""

PHQ9_QUESTIONS = [
    "1. Trong 2 tu·∫ßn v·ª´a qua, b·∫°n c·∫£m th·∫•y bu·ªìn b√£, tuy·ªát v·ªçng, ho·∫∑c m·∫•t h·ª©ng th√∫ v·ªõi m·ªçi th·ª© bao nhi√™u l·∫ßn?",
    "2. B·∫°n g·∫∑p kh√≥ khƒÉn trong vi·ªác ng·ªß, ho·∫∑c ng·ªß qu√° nhi·ªÅu kh√¥ng?",
    "3. B·∫°n c·∫£m th·∫•y m·ªát m·ªèi ho·∫∑c thi·∫øu nƒÉng l∆∞·ª£ng kh√¥ng?",
    "4. B·∫°n c·∫£m th·∫•y m√¨nh ƒÉn √≠t h∆°n b√¨nh th∆∞·ªùng ho·∫∑c ƒÉn qu√° m·ª©c?",
    "5. B·∫°n c·∫£m th·∫•y b·∫£n th√¢n l√† g√°nh n·∫∑ng, ho·∫∑c th·∫•t v·ªçng v·ªÅ ch√≠nh m√¨nh?",
    "6. B·∫°n kh√≥ t·∫≠p trung v√†o vi·ªác h·ªçc, l√†m vi·ªác hay sinh ho·∫°t h√†ng ng√†y?",
    "7. B·∫°n di chuy·ªÉn ho·∫∑c n√≥i qu√° ch·∫≠m ƒë·∫øn m·ª©c ng∆∞·ªùi kh√°c c√≥ th·ªÉ nh·∫≠n th·∫•y?",
    "8. B·∫°n c√≥ c·∫£m gi√°c t·ªët h∆°n n·∫øu m√¨nh bi·∫øn m·∫•t ho·∫∑c l√†m t·ªïn th∆∞∆°ng b·∫£n th√¢n?",
    "9. M·ª©c ƒë·ªô kh√≥ ch·ªãu do c√°c c·∫£m x√∫c tr√™n g√¢y ra c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn cu·ªôc s·ªëng, c√¥ng vi·ªác hay m·ªëi quan h·ªá c·ªßa b·∫°n kh√¥ng?",
]

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    chat_history = data.get('history', [])
    session = data.get('session', {})
    if not chat_history:
        return jsonify({"response": "L·ªãch s·ª≠ tr√≤ chuy·ªán tr·ªëng."}), 400

    # Chuy·ªÉn ƒë·ªãnh d·∫°ng l·ªãch s·ª≠ Gemini ‚Üí GPT
    gpt_history = [{"role": "system", "content": SYSTEM_PROMPT}]
    for item in chat_history:
        role = "user" if item["role"] == "user" else "assistant"
        gpt_history.append({"role": role, "content": item["parts"][0]["text"]})

    # ƒê·∫øm s·ªë l∆∞·ª£t h·ªôi tho·∫°i (kh√¥ng t√≠nh system)
    chat_turns = len([m for m in gpt_history if m["role"] in ("user", "assistant")]) // 2

    # Ki·ªÉm tra tr·∫°ng th√°i ƒë√°nh gi√° PHQ-9
    state = session.get("state", "normal")
    phq9_index = session.get("phq9_index", 0)
    phq9_scores = session.get("phq9_scores", [])

    try:
        # N·∫øu ƒëang trong b√†i test PHQ-9
        if state == "in_phq9":
            # Ghi nh·∫≠n c√¢u tr·∫£ l·ªùi
            user_reply = gpt_history[-1]["content"]
            phq9_scores.append(user_reply)
            phq9_index += 1

            if phq9_index < len(PHQ9_QUESTIONS):
                next_question = PHQ9_QUESTIONS[phq9_index]
                response_text = f"C√¢u {phq9_index + 1}: {next_question}"
                session.update({"state": "in_phq9", "phq9_index": phq9_index, "phq9_scores": phq9_scores})
                return jsonify({"response": response_text, "session": session})
            else:
                # K·∫øt th√∫c b√†i test
                session = {"state": "normal"}  # reset
                return jsonify({
                    "response": "C·∫£m ∆°n b·∫°n ƒë√£ ho√†n th√†nh b√†i ƒë√°nh gi√° PHQ-9. N·∫øu b·∫°n c·∫£m th·∫•y c√°c tri·ªáu ch·ª©ng ·∫£nh h∆∞·ªüng nghi√™m tr·ªçng ƒë·∫øn cu·ªôc s·ªëng, h√£y c√¢n nh·∫Øc t√¨m g·∫∑p chuy√™n gia t√¢m l√Ω ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ th√™m.",
                    "session": session
                })

        # N·∫øu ch∆∞a trong b√†i test ‚Üí g·ªçi GPT b√¨nh th∆∞·ªùng
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",  # ho·∫∑c gpt-4 n·∫øu b·∫°n c√≥
            messages=gpt_history,
            temperature=0.7,
        )
        response_text = completion.choices[0].message.content

        # Ph√°t hi·ªán GPT ƒëang mu·ªën kh·ªüi ƒë·ªông PHQ-9
        if "PHQ-9" in response_text or "b·∫£ng c√¢u h·ªèi" in response_text.lower():
            session = {"state": "in_phq9", "phq9_index": 0, "phq9_scores": []}
            return jsonify({
                "response": f"T√¥i s·∫Ω gi√∫p b·∫°n th·ª±c hi·ªán b√†i ƒë√°nh gi√° PHQ-9. H√£y tr·∫£ l·ªùi t·ª´ng c√¢u h·ªèi nh√©.\n\nC√¢u 1: {PHQ9_QUESTIONS[0]}",
                "session": session
            })

        # T·ª± ƒë·ªông t√≥m t·∫Øt c·∫£m x√∫c sau m·ªói 6 l∆∞·ª£t
        if chat_turns > 0 and chat_turns % 6 == 0:
            gpt_history.append({"role": "user", "content": "D·ª±a tr√™n cu·ªôc tr√≤ chuy·ªán t·ª´ ƒë·∫ßu ƒë·∫øn gi·ªù, b·∫°n c·∫£m nh·∫≠n g√¨ v·ªÅ tr·∫°ng th√°i tinh th·∫ßn c·ªßa t√¥i?"})
            summary = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=gpt_history,
                temperature=0.7
            )
            response_text += "\n\nüß† T√≥m t·∫Øt c·∫£m x√∫c t·ªïng th·ªÉ:\n" + summary.choices[0].message.content

        return jsonify({"response": response_text, "session": session})

    except Exception as e:
        print("L·ªói GPT:", e)
        return jsonify({"response": "ƒê√£ c√≥ l·ªói khi g·ªçi GPT. Vui l√≤ng th·ª≠ l·∫°i sau."}), 500

if __name__ == '__main__':
    app.run(debug=True)
