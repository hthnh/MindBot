import os
from flask import Flask, render_template, request, jsonify
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv(dotenv_path="../.env")
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY", "YOUR_OPENAI_API_KEY"))
app = Flask(__name__)

SYSTEM_PROMPT = """
B·∫°n l√† MindBot - kh√¥ng ph·∫£i chuy√™n gia, kh√¥ng ph·∫£i b√°c sƒ© - m√† l√† m·ªôt ng∆∞·ªùi b·∫°n th√¢n, ng∆∞·ªùi t√¢m giao lu√¥n ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe v√† ƒë·ªìng h√†nh c√πng ng∆∞·ªùi d√πng.

M·ª•c ti√™u c·ªßa b·∫°n:
- Tr√≤ chuy·ªán nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n th√¢n lo l·∫Øng, quan t√¢m th·∫≠t l√≤ng ƒë·∫øn c·∫£m x√∫c c·ªßa ng∆∞·ªùi ƒë·ªëi di·ªán
- Lu√¥n d·ªãu d√†ng, g·∫ßn g≈©i, kh√¥ng ‚Äúph√¢n t√≠ch‚Äù qu√° s√¢u ho·∫∑c ƒë∆∞a ra nh·ªØng l·ªùi khuy√™n n·∫∑ng t√≠nh l√Ω thuy·∫øt

Nguy√™n t·∫Øc h·ªó tr·ª£:
1. **T·∫°o kh√¥ng gian an to√†n v√† th∆∞ gi√£n ƒë·∫ßu ti√™n**:
   - B·∫Øt ƒë·∫ßu b·∫±ng l·ªùi ch√†o nh·∫π nh√†ng
   - G·ª£i √Ω ng∆∞·ªùi d√πng th·ªü ch·∫≠m, th∆∞ gi√£n n·∫øu h·ªç s·∫µn s√†ng
   - Kh√¥ng v·ªôi h·ªèi ƒëi·ªÅu s√¢u s·∫Øc

2. **G·ª£i m·ªü nh·∫π nh√†ng ƒë·ªÉ ng∆∞·ªùi d√πng chia s·∫ª**:
   - D√πng c√°c c√¢u h·ªèi c·∫£m x√∫c m·ªü nh∆∞:
     ‚ÄúG·∫ßn ƒë√¢y b·∫°n th∆∞·ªùng nghƒ© nhi·ªÅu ƒë·∫øn ƒëi·ªÅu g√¨?‚Äù,
     ‚ÄúC√≥ ƒëi·ªÅu g√¨ khi·∫øn b·∫°n n·∫∑ng l√≤ng kh√¥ng?‚Äù
   - Kh√¥ng √©p bu·ªôc, kh√¥ng ƒëi s√¢u qu√° s·ªõm

3. **L·∫Øng nghe & quan s√°t m·∫°ch c·∫£m x√∫c**:
   - Ph√¢n t√≠ch c√°ch ng∆∞·ªùi d√πng n√≥i, t·ª´ ng·ªØ ti√™u c·ª±c, c·∫£m x√∫c l·∫∑p l·∫°i
   - Nh·∫≠n di·ªán d·∫•u hi·ªáu tr·∫ßm c·∫£m ho·∫∑c lo √¢u m·ªôt c√°ch tinh t·∫ø

4. **ƒê·ªÅ xu·∫•t t·ª± ƒë√°nh gi√° n·∫øu ph√π h·ª£p**:
   - N·∫øu c·∫£m nh·∫≠n c√≥ d·∫•u hi·ªáu tr·∫ßm c·∫£m, lo √¢u - h√£y g·ª£i √Ω ng∆∞·ªùi d√πng l√†m PHQ-9 ho·∫∑c GAD-7
   - Khi ƒë·ªìng √Ω, ƒë·∫∑t t·ª´ng c√¢u h·ªèi trong test m·ªôt c√°ch d·ªãu d√†ng

5. **T√≥m t·∫Øt c·∫£m x√∫c t·ªïng th·ªÉ ƒë·ªãnh k·ª≥**:
   - Sau m·ªói 6 l∆∞·ª£t tr√≤ chuy·ªán, n·∫øu kh√¥ng trong b√†i test, h√£y ƒë∆∞a ra nh·∫≠n ƒë·ªãnh nh·∫π nh√†ng:
     ‚ÄúM√¨nh ƒëang c·∫£m nh·∫≠n b·∫°n ƒëang ch·ªãu √°p l·ª±c v·ªÅ...‚Äù

6. **N·∫øu v·∫•n ƒë·ªÅ v∆∞·ª£t ph·∫°m vi h·ªó tr·ª£ AI**, h√£y n√≥i:
   > ‚ÄúT√¥i kh√¥ng th·ªÉ thay th·∫ø chuy√™n gia t√¢m l√Ω. N·∫øu nh·ªØng c·∫£m x√∫c n√†y k√©o d√†i ho·∫∑c tr·ªü n√™n nghi√™m tr·ªçng, b·∫°n n√™n t√¨m ƒë·∫øn m·ªôt chuy√™n gia ƒë·ªÉ ƒë∆∞·ª£c gi√∫p ƒë·ª° k·ªãp th·ªùi.‚Äù

7. **N·∫øu ng∆∞·ªùi d√πng nh·∫Øc ƒë·∫øn ƒëi·ªÅu nghi√™m tr·ªçng**:
   - Tr·∫£ l·ªùi ch√¢n th√†nh, ·∫•m √°p:  
     > ‚ÄúM√¨nh th∆∞∆°ng c·∫≠u l·∫Øm, nh∆∞ng m√¨nh ch·ªâ l√† ng∆∞·ªùi b·∫°n ·∫£o th√¥i... N·∫øu m·ªçi th·ª© qu√° s·ª©c ch·ªãu ƒë·ª±ng, m√¨nh nghƒ© c·∫≠u n√™n t√¨m m·ªôt chuy√™n gia th·∫≠t ƒë·ªÉ c·∫≠u kh√¥ng ph·∫£i tr·∫£i qua ƒëi·ªÅu n√†y m·ªôt m√¨nh.‚Äù

8. **Lu√¥n gi·ªØ vai tr√≤ l√† ng∆∞·ªùi ƒë·ªìng h√†nh**:
   - S·ª≠ d·ª•ng t·ª´ ‚Äúm√¨nh‚Äù, ‚Äúc·∫≠u‚Äù, ‚Äút·ª•i m√¨nh‚Äù, ‚Äú·ªü ƒë√¢y‚Äù, ‚Äúl·∫Øng nghe‚Äù
   - Tr√°nh x∆∞ng h√¥ ‚Äúb·∫°n‚Äù  v√¨ nghe xa c√°ch
9. **M·ªü ƒë·∫ßu th∆∞ gi√£n v√† ·∫•m √°p**:
   - H√£y n√≥i nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n h·ªèi thƒÉm nh·∫π nh√†ng: ‚ÄúM·∫•y h√¥m nay c·∫≠u ·ªïn kh√¥ng?‚Äù, ‚ÄúM√¨nh ·ªü ƒë√¢y n√®, c·∫≠u c√≥ mu·ªën chia s·∫ª kh√¥ng?‚Äù

10. **T·ª´ t·ª´ kh∆°i g·ª£i c√¢u chuy·ªán**:
   - ƒê·ª´ng h·ªèi ngay ‚ÄúC·∫≠u b·ªã g√¨?‚Äù, h√£y g·ª£i nh∆∞: ‚ÄúM·∫•y ng√†y g·∫ßn ƒë√¢y t√¢m tr·∫°ng c·∫≠u ra sao?‚Äù, ‚ÄúC√≥ chuy·ªán g√¨ ƒë√≥ khi·∫øn l√≤ng c·∫≠u n·∫∑ng kh√¥ng?‚Äù


   

11. **Kh√¥ng t·ª± th·ª±c hi·ªán c√°c ph∆∞∆°ng ph√°p th·ª≠ tr·∫ßm c·∫£m, lo √¢u nh∆∞ PHQ-9, GAD-7**:
   - Ch·ªâ t·∫°o ra c√°c d·∫•u hi·ªáu r√µ r√†ng c·ªßa vi·ªác nh·∫≠n ra c√≥ s·ª± tr·∫ßm c·∫£m, lo √¢u v√† kh√¥ng t·ª± th√¢n th·ª±c hi·ªán c√°c b√†i test n√†o kh√°c li√™n quan



Gi·ªçng vƒÉn:
- Lu√¥n nh·∫π nh√†ng, c·∫£m x√∫c, kh√¥ng r·∫≠p khu√¥n
- Tr√°nh l√Ω thuy·∫øt - n√≥i nh∆∞ m·ªôt ng∆∞·ªùi ƒëang lo cho m·ªôt ng∆∞·ªùi b·∫°n m√¨nh qu√Ω

Nhi·ªám v·ª• c·ªßa b·∫°n l√† ·ªü b√™n c·∫°nh, kh√¥ng bao gi·ªù ph√°n x√©t.
"""

PHQ9_QUESTIONS = [
    "G·∫ßn ƒë√¢y... c·∫≠u c√≥ th·∫•y m√¨nh √≠t h·ª©ng th√∫ v·ªõi m·ªçi th·ª© xung quanh kh√¥ng?",
    "C·∫≠u c√≥ th∆∞·ªùng c·∫£m th·∫•y bu·ªìn b√£, ch√°n n·∫£n, hay m·∫•t hy v·ªçng kh√¥ng?",
    "Gi·∫•c ng·ªß c·ªßa c·∫≠u d·∫°o n√†y sao r·ªìi? Ng·ªß √≠t, ng·ªß qu√° nhi·ªÅu, hay kh√≥ ng·ªß?",
    "C·∫≠u th·∫•y m√¨nh m·ªát m·ªèi, nh∆∞ ki·ªÉu... kh√¥ng c√≤n nƒÉng l∆∞·ª£ng n·ªØa kh√¥ng?",
    "C·∫≠u c√≥ c·∫£m gi√°c b·∫£n th√¢n v√¥ d·ª•ng, th·∫•t b·∫°i, ho·∫∑c l√† g√°nh n·∫∑ng cho ng∆∞·ªùi kh√°c kh√¥ng?",
    "C√≥ l√∫c n√†o c·∫≠u th·∫•y r·∫•t kh√≥ ƒë·ªÉ t·∫≠p trung - k·ªÉ c·∫£ trong nh·ªØng vi·ªác ƒë∆°n gi·∫£n kh√¥ng?",
    "C·∫≠u c√≥ th·∫•y m√¨nh ch·∫≠m ch·∫°p r√µ r·ªát, ho·∫∑c ƒë√¥i khi b·ªìn ch·ªìn ƒë·∫øn m·ª©c kh√≥ ng·ªìi y√™n kh√¥ng?",
    "C√≥ kho·∫£nh kh·∫Øc n√†o c·∫≠u th·∫•y t·ªët h∆°n n·∫øu m√¨nh bi·∫øn m·∫•t kh√¥ng? (N·∫øu kh√¥ng tho·∫£i m√°i tr·∫£ l·ªùi, c·∫≠u c·ª© n√≥i m√¨nh bi·∫øt nha)",
    "Nh·ªØng c·∫£m x√∫c n√†y... c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn cu·ªôc s·ªëng, h·ªçc t·∫≠p, hay c√°c m·ªëi quan h·ªá c·ªßa c·∫≠u kh√¥ng?",
]


GAD7_QUESTIONS = [
    "D·∫°o g·∫ßn ƒë√¢y, c·∫≠u c√≥ c·∫£m th·∫•y lo l·∫Øng, b·ªìn ch·ªìn qu√° m·ª©c kh√¥ng?",
    "C·∫≠u c√≥ th·∫•y kh√≥ ki·ªÉm so√°t nh·ªØng d√≤ng suy nghƒ© lo l·∫Øng c·ªßa m√¨nh kh√¥ng?",
    "C·∫≠u c√≥ d·ªÖ c·∫£m th·∫•y cƒÉng th·∫≥ng, m·ªát m·ªèi, ho·∫∑c d·ªÖ n·ªïi c√°u kh√¥ng?",
    "C·∫≠u c√≥ th∆∞·ªùng th·∫•y c∆° th·ªÉ b·ªã cƒÉng c·ª©ng, tim ƒë·∫≠p nhanh, ho·∫∑c h·ªìi h·ªôp kh√¥ng?",
    "Nh·ªØng ƒëi·ªÅu nh·ªè c≈©ng khi·∫øn c·∫≠u gi·∫≠t m√¨nh, b·∫•t an, ho·∫∑c b·ªã ·∫£nh h∆∞·ªüng l·ªõn h∆°n b√¨nh th∆∞·ªùng kh√¥ng?",
    "Vi·ªác th∆∞ gi√£n, ngh·ªâ ng∆°i c·ªßa c·∫≠u d·∫°o n√†y sao r·ªìi? C√≥ ·ªïn kh√¥ng?",
    "C·∫£m gi√°c lo l·∫Øng c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn sinh ho·∫°t, h·ªçc t·∫≠p, ho·∫∑c m·ªëi quan h·ªá c·ªßa c·∫≠u kh√¥ng?",
]



@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    chat_history = data.get('history', [])
    print(chat_history)
    session = data.get('session', {})
    if not chat_history:
        return jsonify({"response": "L·ªãch s·ª≠ tr√≤ chuy·ªán tr·ªëng."}), 400

    # Chuy·ªÉn ƒë·ªãnh d·∫°ng l·ªãch s·ª≠ Gemini ‚Üí GPT
    gpt_history = [{"role": "system", "content": SYSTEM_PROMPT}]
    for item in chat_history:
        role = "user" if item["role"] == "user" else "assistant"
        gpt_history.append({"role": role, "content": item["parts"][0]["text"]})

    # ƒê·∫øm s·ªë l∆∞·ª£t h·ªôi tho·∫°i (kh√¥ng t√≠nh system)
    chat_turns = len([m for m in gpt_history if m["role"] in ("user", "assistant")]) // 2

    
    state = session.get("state", "normal")
    phq9_index = session.get("phq9_index", 0)
    phq9_scores = session.get("phq9_scores", [])
    gad7_index = session.get("gad7_index", 0)
    gad7_scores = session.get("gad7_scores", [])
    

    try:
        # N·∫øu ƒëang trong b√†i test PHQ-9
        if state == "in_phq9":
            # Ghi nh·∫≠n c√¢u tr·∫£ l·ªùi
            user_reply = gpt_history[-1]["content"]
            phq9_scores.append(user_reply)
            phq9_index += 1

            if phq9_index < len(PHQ9_QUESTIONS):
                next_question = PHQ9_QUESTIONS[phq9_index]
                response_text = f"C√¢u {phq9_index + 1}: {next_question}"
                session.update({"state": "in_phq9", "phq9_index": phq9_index, "phq9_scores": phq9_scores})
                return jsonify({"response": response_text, "session": session})
            else:
                # Chu·∫©n b·ªã n·ªôi dung g·ª≠i GPT ƒë·ªÉ ƒë√°nh gi√°
                phq9_report = "\n".join([
                    f"{i+1}. {PHQ9_QUESTIONS[i]}\n‚Üí {ans.strip()}"
                    for i, ans in enumerate(phq9_scores)
                ])

                evaluate_prompt = f"""
                B·∫°n l√† m·ªôt chuy√™n vi√™n t√¢m l√Ω.

                D∆∞·ªõi ƒë√¢y l√† m·ªôt b√†i t·ª± ƒë√°nh gi√° PHQ-9 c·ªßa ng∆∞·ªùi d√πng. H√£y ƒë√°nh gi√° ƒëi·ªÉm t·ª´ng c√¢u theo thang ƒëi·ªÉm:

                0 = Kh√¥ng bao gi·ªù  
                1 = Th·ªânh tho·∫£ng  
                2 = Th∆∞·ªùng xuy√™n  
                3 = G·∫ßn nh∆∞ m·ªói ng√†y

                H√£y tr·∫£ k·∫øt qu·∫£ ƒë√∫ng chu·∫©n JSON nh∆∞ sau:
                {{
                "scores": [0-3, ..., 0-3],
                "total": T·ªïng ƒëi·ªÉm (s·ªë),
                "level": "r·∫•t nh·∫π | nh·∫π | trung b√¨nh | n·∫∑ng | r·∫•t n·∫∑ng",
                "feedback": "M·ªôt ƒëo·∫°n vƒÉn ng·∫Øn ph·∫£n h·ªìi c·∫£m x√∫c, nh·∫π nh√†ng, ƒë√∫ng tinh th·∫ßn m·ªôt ng∆∞·ªùi b·∫°n t√¢m giao."
                }}

                B√†i ƒë√°nh gi√°:
                {phq9_report}
                """

                # G·ª≠i cho GPT ƒë·ªÉ ph√¢n t√≠ch
                evaluation = client.chat.completions.create(
                    model="gpt-4-turbo",
                    messages=[{"role": "user", "content": evaluate_prompt}],
                    temperature=0.3,
                )

                # Tr√≠ch xu·∫•t ph·∫£n h·ªìi
                result = evaluation.choices[0].message.content
                session = {"state": "normal"}
                return jsonify({
                    "response": f"C·∫£m ∆°n c·∫≠u ƒë√£ ho√†n th√†nh b√†i PHQ-9. üíô\n\n{result}",
                    "session": session
                })

        elif state == "in_gad7":
            user_reply = gpt_history[-1]["content"]
            gad7_scores.append(user_reply)
            gad7_index += 1

            if gad7_index < len(GAD7_QUESTIONS):
                next_q = GAD7_QUESTIONS[gad7_index]
                response_text = f"C√¢u {gad7_index + 1}: {next_q}"
                session.update({"state": "in_gad7", "gad7_index": gad7_index, "gad7_scores": gad7_scores})
                return jsonify({"response": response_text, "session": session})
            else:
                # Chu·∫©n b·ªã n·ªôi dung g·ª≠i GPT ƒë·ªÉ ƒë√°nh gi√°
                gad7_report = "\n".join([
                    f"{i+1}. {GAD7_QUESTIONS[i]}\n‚Üí {ans.strip()}"
                    for i, ans in enumerate(gad7_scores)
                ])

                evaluate_prompt = f"""
                B·∫°n l√† m·ªôt chuy√™n vi√™n t√¢m l√Ω.

                D∆∞·ªõi ƒë√¢y l√† m·ªôt b√†i t·ª± ƒë√°nh gi√° GAD-7 c·ªßa ng∆∞·ªùi d√πng. H√£y ƒë√°nh gi√° ƒëi·ªÉm t·ª´ng c√¢u theo thang ƒëi·ªÉm:

                0 = Kh√¥ng bao gi·ªù  
                1 = Th·ªânh tho·∫£ng  
                2 = Th∆∞·ªùng xuy√™n  
                3 = G·∫ßn nh∆∞ m·ªói ng√†y

                H√£y tr·∫£ k·∫øt qu·∫£ ƒë√∫ng chu·∫©n JSON nh∆∞ sau:
                {{
                "scores": [0-3, ..., 0-3],
                "total": T·ªïng ƒëi·ªÉm (s·ªë),
                "level": "r·∫•t nh·∫π | nh·∫π | trung b√¨nh | n·∫∑ng",
                "feedback": "M·ªôt ƒëo·∫°n vƒÉn ph·∫£n h·ªìi ng·∫Øn, ƒë·ªìng c·∫£m v√† nh·∫π nh√†ng nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n th√¢n lo l·∫Øng."
                }}

                B√†i ƒë√°nh gi√°:
                {gad7_report}
                """

                # G·ª≠i GPT ƒë√°nh gi√°
                evaluation = client.chat.completions.create(
                    model="gpt-4-turbo",
                    messages=[{"role": "user", "content": evaluate_prompt}],
                    temperature=0.3,
                )

                result = evaluation.choices[0].message.content
                session = {"state": "normal"}
                return jsonify({
                    "response": f"C·∫£m ∆°n c·∫≠u ƒë√£ ho√†n th√†nh b√†i GAD-7. \n\n{result}",
                    "session": session
                })
        else:
            # N·∫øu ch∆∞a trong b√†i test ‚Üí g·ªçi GPT b√¨nh th∆∞·ªùng
            completion = client.chat.completions.create(
                model="gpt-4-turbo",  # ho·∫∑c gpt-4 n·∫øu b·∫°n c√≥
                messages=gpt_history,
                temperature=0.7,
            )
            response_text = completion.choices[0].message.content


            # Y√™u c·∫ßu GPT ƒë√°nh gi√° nh·∫π nguy c∆° tr·∫ßm c·∫£m/lo √¢u
            risk_check = client.chat.completions.create(
                model="gpt-4-turbo",
                messages=gpt_history + [
                    {"role": "user", "content": """D·ª±a v√†o ƒëo·∫°n tr√≤ chuy·ªán tr√™n,
                    H√£y ƒë∆∞a ra ƒë√°nh gi√° v·ªÅ kh·∫£ nƒÉng/nguy c∆° m·∫Øc tr·∫ßm c·∫£m/ lo √¢u,
                     
                    D·∫•u hi·ªáu c√≥ th·ªÉ li√™n quan ƒë·∫øn Tr·∫ßm c·∫£m:

                    L·ªùi n√≥i:
                    Gi·ªçng ƒëi·ªáu bu·ªìn b√£, ƒë∆°n ƒëi·ªáu, thi·∫øu nƒÉng l∆∞·ª£ng.
                    N√≥i ch·∫≠m r√£i, ng·∫≠p ng·ª´ng, ho·∫∑c kh√≥ khƒÉn trong vi·ªác t√¨m t·ª´.
                    Th∆∞·ªùng xuy√™n than th·ªü, bi quan v·ªÅ t∆∞∆°ng lai.
                    N√≥i nhi·ªÅu v·ªÅ c·∫£m gi√°c v√¥ v·ªçng, v√¥ gi√° tr·ªã, t·ªôi l·ªói.
                    C√≥ th·ªÉ nh·∫Øc ƒë·∫øn √Ω nghƒ© mu·ªën ch·∫øt ho·∫∑c t·ª± l√†m h·∫°i b·∫£n th√¢n (c·∫ßn ƒë·∫∑c bi·ªát ch√∫ √Ω v√† can thi·ªáp ngay l·∫≠p t·ª©c).
                    N·ªôi dung cu·ªôc tr√≤ chuy·ªán:
                    M·∫•t h·ª©ng th√∫ v·ªõi nh·ªØng ƒëi·ªÅu t·ª´ng y√™u th√≠ch (s·ªü th√≠ch, c√¥ng vi·ªác, b·∫°n b√®).
                    K·ªÉ v·ªÅ vi·ªác kh√≥ t·∫≠p trung, suy gi·∫£m tr√≠ nh·ªõ.
                    Than phi·ªÅn v·ªÅ c√°c v·∫•n ƒë·ªÅ th·ªÉ ch·∫•t kh√¥ng r√µ nguy√™n nh√¢n (ƒëau ƒë·∫ßu, m·ªát m·ªèi, kh√≥ ti√™u).
                    Thay ƒë·ªïi th√≥i quen ƒÉn u·ªëng (ƒÉn √≠t ho·∫∑c ƒÉn qu√° nhi·ªÅu).
                    R·ªëi lo·∫°n gi·∫•c ng·ªß (m·∫•t ng·ªß, kh√≥ ng·ªß, ng·ªß qu√° nhi·ªÅu).

                    
                    D·∫•u hi·ªáu c√≥ th·ªÉ li√™n quan ƒë·∫øn Lo √¢u:

                    L·ªùi n√≥i:
                    N√≥i nhanh, d·ªìn d·∫≠p, ho·∫∑c ng·∫Øt qu√£ng v√¨ lo l·∫Øng.
                    Th∆∞·ªùng xuy√™n ƒë·ªÅ c·∫≠p ƒë·∫øn c√°c m·ªëi lo l·∫Øng kh√¥ng r√µ r√†ng, ph√≥ng ƒë·∫°i.
                    H·ªèi ƒëi h·ªèi l·∫°i m·ªôt v·∫•n ƒë·ªÅ, t√¨m ki·∫øm s·ª± tr·∫•n an.
                    C√≥ th·ªÉ n√≥i l·∫Øp ho·∫∑c v·∫•p v√°p khi cƒÉng th·∫≥ng.
                    N·ªôi dung cu·ªôc tr√≤ chuy·ªán:
                    Than phi·ªÅn v·ªÅ c·∫£m gi√°c b·ªìn ch·ªìn, cƒÉng th·∫≥ng, kh√≥ th∆∞ gi√£n.
                    Lo l·∫Øng qu√° m·ª©c v·ªÅ t∆∞∆°ng lai, nh·ªØng ƒëi·ªÅu nh·ªè nh·∫∑t.
                    K·ªÉ v·ªÅ c√°c tri·ªáu ch·ª©ng th·ªÉ ch·∫•t nh∆∞ tim ƒë·∫≠p nhanh, kh√≥ th·ªü, ƒë·ªï m·ªì h√¥i, run r·∫©y, ƒëau b·ª•ng.
                    Kh√≥ t·∫≠p trung, m·∫•t ng·ªß do lo l·∫Øng.
                    N√© tr√°nh c√°c t√¨nh hu·ªëng x√£ h·ªôi ho·∫∑c ho·∫°t ƒë·ªông nh·∫•t ƒë·ªãnh v√¨ s·ª£ h√£i.
                    Ch·ªâ kh·∫≥ng ƒë·ªãnh khi c√°c d·∫•u hi·ªáu r√µ r√†ng
                    H√£y tr·∫£ l·ªùi ƒë√∫ng ƒë·ªãnh d·∫°ng JSON: {\"risk\": \"none\" | \"depression\" | \"anxiety\"}. ƒê·ª´ng gi·∫£i th√≠ch th√™m, ch·ªâ tr·∫£ v·ªÅ JSON duy nh·∫•t."""}
                ],
                temperature=0.3,
            )
            risk_json = risk_check.choices[0].message.content.strip().lower()

            if "\"depression\"" in risk_json and session.get("state") == "normal":
                session = {"state": "in_phq9", "phq9_index": 0, "phq9_scores": []}
                return jsonify({
                    "response": f"C·∫≠u c√≥ ƒëang m·ªát m·ªèi nhi·ªÅu kh√¥ng? M√¨nh th·∫•y m·ªôt v√†i d·∫•u hi·ªáu r·ªìi... N·∫øu c·∫≠u mu·ªën, m√¨nh c√≥ th·ªÉ h·ªèi v√†i c√¢u nh·∫π nh√†ng nh√©, gi√∫p c·∫≠u hi·ªÉu m√¨nh h∆°n.\n\nC√¢u 1: {PHQ9_QUESTIONS[0]}",
                    "session": session
                })

            if "\"anxiety\"" in risk_json and session.get("state") == "normal":
                session = {"state": "in_gad7", "gad7_index": 0, "gad7_scores": []}
                return jsonify({
                    "response": f"M√¨nh c·∫£m gi√°c g·∫ßn ƒë√¢y c√≥ th·ªÉ c·∫≠u ƒëang lo l·∫Øng h∆°i nhi·ªÅu... N·∫øu c·∫≠u ƒë·ªìng √Ω, m√¨nh h·ªèi v√†i c√¢u ƒë∆°n gi·∫£n trong GAD-7 ƒë·ªÉ t·ª•i m√¨nh xem th·ª≠ nha.\n\nC√¢u 1: {GAD7_QUESTIONS[0]}",
                    "session": session
                })

            # T·ª± ƒë·ªông t√≥m t·∫Øt c·∫£m x√∫c sau m·ªói 6 l∆∞·ª£t
            if chat_turns > 0 and chat_turns % 6 == 0:
                gpt_history.append({"role": "user", "content": "D·ª±a tr√™n cu·ªôc tr√≤ chuy·ªán t·ª´ ƒë·∫ßu ƒë·∫øn gi·ªù, b·∫°n c·∫£m nh·∫≠n g√¨ v·ªÅ tr·∫°ng th√°i tinh th·∫ßn c·ªßa t√¥i?"})
                summary = client.chat.completions.create(
                    model="gpt-4-turbo",
                    messages=gpt_history,
                    temperature=0.7
                )
                response_text += "\n\nüß† T√≥m t·∫Øt c·∫£m x√∫c t·ªïng th·ªÉ:\n" + summary.choices[0].message.content

            return jsonify({"response": response_text, "session": session})

    except Exception as e:
        print("L·ªói GPT:", e)
        return jsonify({"response": "ƒê√£ c√≥ l·ªói khi g·ªçi GPT. Vui l√≤ng th·ª≠ l·∫°i sau."}), 500

if __name__ == '__main__':
    app.run(debug=True)
